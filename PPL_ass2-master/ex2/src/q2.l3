(define make-ok
  (lambda (val)
    (cons "Ok"  val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) "Ok")
      #f  
    )
  )
 )
(define error?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) "Failure")
      #f
      )

  )
 )

(define result?
  (lambda (res)
    (and(pair? res)
    (or(ok? res)
       (error? res))
    )
  )
 )

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if(ok? res)
         (f (cdr res))
         (make-error (cdr res))))
  )
)

(define make-dict
  (lambda ()
    (list)
  )
)

(define dict?
  (lambda (e)
    (if (empty? e)
        #t
       (if (pair? e)
          (if (pair? (car e))
              (dict? (cdr e))
              #f
          )
          #f  
        )
  )
))

(define get
  (lambda (dict k)
    (if (dict? dict)
         (if (empty? dict)
             (make-error "Key not found")
             (if (eq? (car (car dict)) k)
                 (make-ok (cdr (car dict)))
                 (get (cdr dict) k)))
         (make-error "Error: not a dictionary"))
        
  )
)

(define put
  (lambda (dict k v)
    (if (dict? dict)
        (if (empty? dict)
            (make-ok  (list (cons k v)) )
            (if (eq? (car (car dict)) k)
                (if (empty? (cdr dict))
                    (make-ok (list (cons k v)))
                    (make-ok (list (cons k v) (cdr dict))))
                (make-ok(cons (car dict) (put1 (cdr dict) k v))))
        )
        (make-error "Error: not a dictionary")
        )
  )
)

(define put1
  (lambda (dict k v)
    
        (if (empty? dict)
            (list (cons k v))
            (if (eq? (car (car dict)) k)
                (if (empty? (cdr dict))
                    (list (cons k v))
                    (list (cons k v) (cdr dict)))
                (cons (car dict) (put1 (cdr dict) k v)))
        )
  )
)

(define map-dict
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
       (make-ok dict)
            (make-ok (cons (cons (car (car dict))  (f (cdr(car dict)))) (map-dict1 (cdr dict) f))))
    (make-error "Error: not a dictionary"))
  )
)

(define map-dict1
  (lambda (dict f)
    (if (dict? dict)
    (if (empty? dict)
        dict
            (cons (cons (car (car dict))  (f (cdr(car dict)))) (map-dict1 (cdr dict) f)))
    (make-error "Error: not a dictionary"))
  )
)

(define filter-dict
  (lambda (dict pred)
      (filter-dict1 dict pred #f)
  )
)

(define filter-dict1
  (lambda (dict pred b)
    (if (dict? dict)
    (if (empty? dict)
        (if b
            dict
            (make-ok dict))
        (if b
            (if (pred (car (car dict)) (cdr (car dict)))
                (cons (car dict) (filter-dict1 (cdr dict) pred b))
            (filter-dict1 (cdr dict) pred b))
            (if (pred (car (car dict)) (cdr (car dict)))
                (make-ok (cons (car dict) (filter-dict1 (cdr dict) pred #t)))
            (filter-dict1 (cdr dict) pred b))
            )
    )
    (make-error "Error: not a dictionary")
    )
  )
)